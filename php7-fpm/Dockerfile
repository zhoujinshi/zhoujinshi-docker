#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

FROM alpine:3.14

LABEL maintainer="jinge <admin@cnbbx.com>" version="1.0"

ENV LANG zh_CN.UTF-8
ENV TIME_ZONE Asia/Shanghai
RUN echo "https://mirror.tuna.tsinghua.edu.cn/alpine/v3.9/main/" > /etc/apk/repositories && echo "https://mirror.tuna.tsinghua.edu.cn/alpine/v3.9/community/" >> /etc/apk/repositories \
	&& apk update && apk add --no-cache -U tzdata \
	&& cp /usr/share/zoneinfo/${TIME_ZONE} /etc/localtime && echo "${TIME_ZONE}" > /etc/timezone && apk del tzdata

# dependencies required for running "phpize"
# these get automatically installed and removed by "docker-php-ext-*" (unless they're already installed)
ENV PHPIZE_DEPS \
	autoconf \
	dpkg-dev dpkg \
	file \
	g++ \
	gcc \
	libc-dev \
	make \
	pkgconf \
	re2c

# persistent / runtime deps
RUN apk add --no-cache \
	ca-certificates \
	curl \
	tar \
	xz \
	# https://github.com/docker-library/php/issues/494
	openssl

# ensure www-data user exists
RUN set -eux; \
	adduser -u 82 -D -S -G www-data www-data
	
# 82 is the standard uid/gid for "www-data" in Alpine
# https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable
# https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable
# https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable

ENV PHP_INI_DIR /usr/local/etc/php
RUN set -eux; \
	mkdir -p "$PHP_INI_DIR/conf.d"; \
	# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
	[ ! -d /var/www/html ]; \
	mkdir -p /var/www/html; \
	chown www-data:www-data /var/www/html; \
	chmod 777 /var/www/html; \
	mkdir -p /var/www/log; \
	chown www-data:www-data /var/www/log; \
	chmod 777 /var/www/log

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -pie"

ENV GPG_KEYS CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D

ENV PHP_VERSION 7.3.32
ENV PHP_URL="https://www.php.net/distributions/php-7.3.32.tar.xz" PHP_ASC_URL="https://www.php.net/distributions/php-7.3.32.tar.xz.asc"
ENV PHP_SHA256="94effa250b80f031e77fbd98b6950c441157a2a8f9e076ee68e02f5b0b7a3fd9"

RUN set -xe; \
	\
	apk add --no-cache --virtual .fetch-deps gnupg wget \
		; \
		\
		mkdir -p /usr/src; \
		cd /usr/src; \
		\
		wget -O php.tar.xz "$PHP_URL"; \
		\
		if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
		fi; \
		if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
		fi; \
		\
		if [ -n "$PHP_ASC_URL" ]; then \
		curl -fsSL -o php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
		gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		gpgconf --kill all; \
		rm -rf "$GNUPGHOME"; \
	fi; \
	\
	apk del --no-network .fetch-deps

COPY docker-php-source /usr/local/bin/

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
	$PHPIZE_DEPS \
	argon2-dev \
	coreutils \
	curl-dev \
	libedit-dev \
	libsodium-dev \
	libxml2-dev \
	libzip-dev \
	oniguruma-dev \
	openssl-dev \
	sqlite-dev \
	libwebp-dev \
	freetype-dev \
	libpng-dev \
	jpeg-dev \
	libjpeg-turbo-dev \
	freetds-dev \
	libstdc++ \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
	CPPFLAGS="$PHP_CPPFLAGS" \
	LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
	--build="$gnuArch" \
	--with-config-file-path="$PHP_INI_DIR" \
	--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
	\
	# make sure invalid --configure-flags are fatal errors intead of just warnings
	--enable-option-checking=fatal \
	\
	# https://github.com/docker-library/php/issues/439
	--with-mhash \
	--enable-pcntl \
	--enable-sockets \
	# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
	--enable-ftp \
	# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
	--enable-mbstring \
	--enable-mbregex \
	# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
	--enable-mysqlnd \
	# https://wiki.php.net/rfc/argon2_password_hash (7.2+)
	--with-password-argon2 \
	# https://wiki.php.net/rfc/libsodium
	--with-sodium=shared \
	--with-pdo-sqlite=/usr \
	--with-sqlite3=/usr \
	--with-curl \
	--with-libedit \
	--with-openssl \
	--enable-xml \
	--with-zlib \
	--enable-zip \
	--with-gd \
	--with-pdo-dblib \
	--with-pear \
	--with-freetype-dir \
	--with-jpeg-dir \
	--enable-fd-setsize=11111 \
	\
	# bundled pcre does not support JIT on s390x
	# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
	$(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
	\
	$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
	&& find -type f -name '*.a' -delete \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	\
	# https://github.com/docker-library/php/issues/692 (copy default example "php.ini" files somewhere easily discoverable)
	&& cp -v php.ini-* "$PHP_INI_DIR/" \
	\
	&& cd / \
	&& docker-php-source delete \
	\
	&& runDeps="$( \
	scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
	| tr ',' '\n' \
	| sort -u \
	| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache $runDeps \
	\
	&& apk del --no-network .build-deps \
	\
	# https://github.com/docker-library/php/issues/443
	&& pecl update-channels \
	&& rm -rf /tmp/pear ~/.pearrc

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
RUN docker-php-ext-enable sodium && docker-php-ext-install pdo_mysql mysqli opcache \
	&& apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS \
	# php extension: redis
	&& pecl install redis \
	&& docker-php-ext-enable redis \
	# php extension: bcmath
	&& docker-php-ext-install bcmath \
	# php extension: xdebug
	&& pecl install xdebug.tgz \
	&& docker-php-ext-enable xdebug \
	# php extension: mongodb
	&& pecl install mongodb \
	&& docker-php-ext-enable mongodb \
	&& apk del .phpize-deps \
	&& rm /usr/src/*

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc/php/conf.d/ \
	&& { \
	echo '[opcache]'; \
	echo 'opcache.enable_cli=0'; \
	} | tee docker-php-conf-opcache.ini \
	&& { \
	echo '[log]'; \
	echo 'log_errors=On'; \
	echo 'error_log=/dev/stderr'; \
	} | tee docker-php-conf-log.ini \
	&& { \
	echo '[date]'; \
	echo 'date.timezone=Asia/Shanghai'; \
	} | tee docker-php-conf-date.ini \
	&& { \
	echo '[xdebug]'; \
	echo 'xdebug.remote_enable=1'; \
	echo 'xdebug.remote_host=127.0.0.1'; \
	echo 'xdebug.remote_port=5800'; \
	echo 'xdebug.remote_connect_back=0'; \
	echo 'xdebug.profiler_enable=1'; \
	echo 'xdebug.idekey=PHPSTORM'; \
	echo 'xdebug.remote_log=/var/www/log/xdebug.log'; \
	} | tee docker-php-conf-xdebug.ini

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
	# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
	sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
	cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
	# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
	mkdir php-fpm.d; \
	cp php-fpm.conf.default php-fpm.d/www.conf; \
	{ \
	echo '[global]'; \
	echo 'include=etc/php-fpm.d/*.conf'; \
	} | tee php-fpm.conf; \
	fi \
	&& { \
	echo '[global]'; \
	echo 'error_log = /proc/self/fd/2'; \
	echo; echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114'; echo 'log_limit = 8192'; \
	echo; \
	echo '[www]'; \
	echo '; if we send this to /proc/self/fd/1, it never appears'; \
	echo 'access.log = /proc/self/fd/2'; \
	echo; \
	echo 'clear_env = no'; \
	echo; \
	echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
	echo 'catch_workers_output = yes'; \
	echo 'decorate_workers_output = no'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
	echo '[global]'; \
	echo 'daemonize = no'; \
	echo; \
	echo '[www]'; \
	echo 'listen = 9000'; \
	} | tee php-fpm.d/zz-docker.conf

COPY www.conf /usr/local/etc/php-fpm.d/www.conf

# Override stop signal to stop process gracefully
# https://github.com/php/php-src/blob/17baa87faddc2550def3ae7314236826bc1b1398/sapi/fpm/php-fpm.8.in#L163
STOPSIGNAL SIGQUIT

CMD ["php", "-a"]
##</autogenerated>##
